for(i in 1:100){
# generate test data
NT <- 1000
t1 <- runif(NT,-1,1)
t2 <- runif(NT,-1,1)
ty <- effe(t1, t2)
oneTest <- data.frame(x1, x2, y = as.factor(ty))
# generate train data
N <- 100
gamma <- 1.5
x1 <- runif(N,-1,1)
x2 <- runif(N,-1,1)
y <- effe(x1, x2)
oneTrain <- data.frame(x1, x2, y=as.factor(y))
# ---------  SVM --------------------------
svm.model <- svm( y ~ ., data=oneTrain,
cost=100000000,
scale = FALSE,
kernel = "radial",
gamma=gamma,
shrinking = FALSE,
type = "C-classification",
nu = 0.01,
epsilon=0.1,
tolerance=0.0001)
#  head(oneTrain)
svm.pred     <- predict(svm.model, oneTrain[,-3], types="class")
svm.pred.out <- predict(svm.model, oneTest[ ,-3], types="class")
#result
#  print(table(pred=svm.pred, true=oneTrain[,1]))
EintSvm[i] <- 1-  sum(svm.pred     == oneTrain[,3]) / nrow(oneTrain)
EoutSvm[i] <- 1-  sum(svm.pred.out == oneTest[ ,3]) / nrow(oneTest)
#----------- RBF ---------------------------------
K <- 9
kms <- kmeans(oneTrain[,-3], iter.max=100, centers=K)
if(sum(kms$size==0)>0) print("WARNING!");
phi <- matrix(NA, N, K+1)
for(j in 2:(K+1)){
phi [,j] <- exp( gamma * ((x1 - kms$centers[j-1,1])**2 + (x2 - kms$centers[j-1,2])**2 ))
}
phi[,1] <- 1
Phiplus <- solve( t(phi) %*% phi ) %*% t(phi)
w <- Phiplus %*% y
gx <- sign(phi %*% w)
EinRbf[i] <- sum(gx !=  y) /N
phiOut <- matrix(NA, NT, K+1)
for(j in 2:(K+1)){
phiOut[,j] <- exp( gamma * ((t1 - kms$centers[j-1,1])**2 + (t2 - kms$centers[j-1,2])**2 ))
}
phiOut[,1] <- 1
gxout <- sign(phiOut%*% w)
EoutRbf[i] <- sum(gxout !=  ty) /NT
}
EoutRbf
EoutSvm
sum(EoutRbf < EoutSvm)
EintSvm<-NULL
EoutSvm <-NULL
EinRbf <- NULL
EoutRbf <- NULL
i <- 1
for(i in 1:100){
# generate test data
NT <- 1000
t1 <- runif(NT,-1,1)
t2 <- runif(NT,-1,1)
ty <- effe(t1, t2)
oneTest <- data.frame(x1, x2, y = as.factor(ty))
# generate train data
N <- 100
gamma <- 1.5
x1 <- runif(N,-1,1)
x2 <- runif(N,-1,1)
y <- effe(x1, x2)
oneTrain <- data.frame(x1, x2, y=as.factor(y))
# ---------  SVM --------------------------
svm.model <- svm( y ~ ., data=oneTrain,
cost=100000000,
scale = FALSE,
kernel = "radial",
gamma=gamma,
shrinking = FALSE,
type = "C-classification",
nu = 0.01,
epsilon=0.1,
tolerance=0.0001)
#  head(oneTrain)
svm.pred     <- predict(svm.model, oneTrain[,-3], types="class")
svm.pred.out <- predict(svm.model, oneTest[ ,-3], types="class")
#result
#  print(table(pred=svm.pred, true=oneTrain[,1]))
EintSvm[i] <- 1-  sum(svm.pred     == oneTrain[,3]) / nrow(oneTrain)
EoutSvm[i] <- 1-  sum(svm.pred.out == oneTest[ ,3]) / nrow(oneTest)
#----------- RBF ---------------------------------
K <- 12
kms <- kmeans(oneTrain[,-3], iter.max=100, centers=K)
if(sum(kms$size==0)>0) print("WARNING!");
phi <- matrix(NA, N, K+1)
for(j in 2:(K+1)){
phi [,j] <- exp( gamma * ((x1 - kms$centers[j-1,1])**2 + (x2 - kms$centers[j-1,2])**2 ))
}
phi[,1] <- 1
Phiplus <- solve( t(phi) %*% phi ) %*% t(phi)
w <- Phiplus %*% y
gx <- sign(phi %*% w)
EinRbf[i] <- sum(gx !=  y) /N
phiOut <- matrix(NA, NT, K+1)
for(j in 2:(K+1)){
phiOut[,j] <- exp( gamma * ((t1 - kms$centers[j-1,1])**2 + (t2 - kms$centers[j-1,2])**2 ))
}
phiOut[,1] <- 1
gxout <- sign(phiOut%*% w)
EoutRbf[i] <- sum(gxout !=  ty) /NT
}
sum(EoutRbf < EoutSvm)
EoutRbf
EoutSvm
EintRbf1<-NULL
EoutRbf1 <-NULL
EinRbf2 <- NULL
EoutRbf2 <- NULL
i <- 1
for(i in 1:100){
# generate test data
NT <- 1000
t1 <- runif(NT,-1,1)
t2 <- runif(NT,-1,1)
ty <- effe(t1, t2)
oneTest <- data.frame(x1, x2, y = as.factor(ty))
# generate train data
N <- 100
gamma <- 1.5
x1 <- runif(N,-1,1)
x2 <- runif(N,-1,1)
y <- effe(x1, x2)
oneTrain <- data.frame(x1, x2, y=as.factor(y))
# ---------  RBF1 --------------------------
K <- 9
kms <- kmeans(oneTrain[,-3], iter.max=100, centers=K)
if(sum(kms$size==0)>0) print("WARNING!");
phi <- matrix(NA, N, K+1)
for(j in 2:(K+1)){
phi [,j] <- exp( gamma * ((x1 - kms$centers[j-1,1])**2 + (x2 - kms$centers[j-1,2])**2 ))
}
phi[,1] <- 1
Phiplus <- solve( t(phi) %*% phi ) %*% t(phi)
w <- Phiplus %*% y
gx <- sign(phi %*% w)
EinRbf1[i] <- sum(gx !=  y) /N
phiOut <- matrix(NA, NT, K+1)
for(j in 2:(K+1)){
phiOut[,j] <- exp( gamma * ((t1 - kms$centers[j-1,1])**2 + (t2 - kms$centers[j-1,2])**2 ))
}
phiOut[,1] <- 1
gxout <- sign(phiOut%*% w)
EoutRbf1[i] <- sum(gxout !=  ty) /NT
#----------- RBF2 ---------------------------------
K <- 12
kms <- kmeans(oneTrain[,-3], iter.max=100, centers=K)
if(sum(kms$size==0)>0) print("WARNING!");
phi <- matrix(NA, N, K+1)
for(j in 2:(K+1)){
phi [,j] <- exp( gamma * ((x1 - kms$centers[j-1,1])**2 + (x2 - kms$centers[j-1,2])**2 ))
}
phi[,1] <- 1
Phiplus <- solve( t(phi) %*% phi ) %*% t(phi)
w <- Phiplus %*% y
gx <- sign(phi %*% w)
EinRbf2[i] <- sum(gx !=  y) /N
phiOut <- matrix(NA, NT, K+1)
for(j in 2:(K+1)){
phiOut[,j] <- exp( gamma * ((t1 - kms$centers[j-1,1])**2 + (t2 - kms$centers[j-1,2])**2 ))
}
phiOut[,1] <- 1
gxout <- sign(phiOut%*% w)
EoutRbf2[i] <- sum(gxout !=  ty) /NT
}
EintRbf1<-NULL
EoutRbf1 <-NULL
EintRbf2 <- NULL
EoutRbf2 <- NULL
i <- 1
for(i in 1:100){
# generate test data
NT <- 1000
t1 <- runif(NT,-1,1)
t2 <- runif(NT,-1,1)
ty <- effe(t1, t2)
oneTest <- data.frame(x1, x2, y = as.factor(ty))
# generate train data
N <- 100
gamma <- 1.5
x1 <- runif(N,-1,1)
x2 <- runif(N,-1,1)
y <- effe(x1, x2)
oneTrain <- data.frame(x1, x2, y=as.factor(y))
# ---------  RBF1 --------------------------
K <- 9
kms <- kmeans(oneTrain[,-3], iter.max=100, centers=K)
if(sum(kms$size==0)>0) print("WARNING!");
phi <- matrix(NA, N, K+1)
for(j in 2:(K+1)){
phi [,j] <- exp( gamma * ((x1 - kms$centers[j-1,1])**2 + (x2 - kms$centers[j-1,2])**2 ))
}
phi[,1] <- 1
Phiplus <- solve( t(phi) %*% phi ) %*% t(phi)
w <- Phiplus %*% y
gx <- sign(phi %*% w)
EintRbf1[i] <- sum(gx !=  y) /N
phiOut <- matrix(NA, NT, K+1)
for(j in 2:(K+1)){
phiOut[,j] <- exp( gamma * ((t1 - kms$centers[j-1,1])**2 + (t2 - kms$centers[j-1,2])**2 ))
}
phiOut[,1] <- 1
gxout <- sign(phiOut%*% w)
EoutRbf1[i] <- sum(gxout !=  ty) /NT
#----------- RBF2 ---------------------------------
K <- 12
kms <- kmeans(oneTrain[,-3], iter.max=100, centers=K)
if(sum(kms$size==0)>0) print("WARNING!");
phi <- matrix(NA, N, K+1)
for(j in 2:(K+1)){
phi [,j] <- exp( gamma * ((x1 - kms$centers[j-1,1])**2 + (x2 - kms$centers[j-1,2])**2 ))
}
phi[,1] <- 1
Phiplus <- solve( t(phi) %*% phi ) %*% t(phi)
w <- Phiplus %*% y
gx <- sign(phi %*% w)
EintRbf2[i] <- sum(gx !=  y) /N
phiOut <- matrix(NA, NT, K+1)
for(j in 2:(K+1)){
phiOut[,j] <- exp( gamma * ((t1 - kms$centers[j-1,1])**2 + (t2 - kms$centers[j-1,2])**2 ))
}
phiOut[,1] <- 1
gxout <- sign(phiOut%*% w)
EoutRbf2[i] <- sum(gxout !=  ty) /NT
}
EintRbf1
EintRbf2
EoutRbf1
EoutRbf2
sum(EintRbf1-EintRbf2)
sum(EintRbf1<EintRbf2)
sum(EoutRbf1<EoutRbf2)
EintRbf1<-NULL
EoutRbf1 <-NULL
EintRbf2 <- NULL
EoutRbf2 <- NULL
i <- 1
for(i in 1:100){
# generate test data
NT <- 1000
t1 <- runif(NT,-1,1)
t2 <- runif(NT,-1,1)
ty <- effe(t1, t2)
oneTest <- data.frame(x1, x2, y = as.factor(ty))
# generate train data
N <- 100
gamma <- 1.5
x1 <- runif(N,-1,1)
x2 <- runif(N,-1,1)
y <- effe(x1, x2)
oneTrain <- data.frame(x1, x2, y=as.factor(y))
# ---------  RBF1 --------------------------
K <- 9
kms <- kmeans(oneTrain[,-3], iter.max=100, centers=K)
if(sum(kms$size==0)>0) print("WARNING!");
phi <- matrix(NA, N, K+1)
for(j in 2:(K+1)){
phi [,j] <- exp( gamma * ((x1 - kms$centers[j-1,1])**2 + (x2 - kms$centers[j-1,2])**2 ))
}
phi[,1] <- 1
Phiplus <- solve( t(phi) %*% phi ) %*% t(phi)
w <- Phiplus %*% y
gx <- sign(phi %*% w)
EintRbf1[i] <- sum(gx !=  y) /N
phiOut <- matrix(NA, NT, K+1)
for(j in 2:(K+1)){
phiOut[,j] <- exp( gamma * ((t1 - kms$centers[j-1,1])**2 + (t2 - kms$centers[j-1,2])**2 ))
}
phiOut[,1] <- 1
gxout <- sign(phiOut%*% w)
EoutRbf1[i] <- sum(gxout !=  ty) /NT
#----------- RBF2 ---------------------------------
K <- 9
gamma <- 2
kms <- kmeans(oneTrain[,-3], iter.max=100, centers=K)
if(sum(kms$size==0)>0) print("WARNING!");
phi <- matrix(NA, N, K+1)
for(j in 2:(K+1)){
phi [,j] <- exp( gamma * ((x1 - kms$centers[j-1,1])**2 + (x2 - kms$centers[j-1,2])**2 ))
}
phi[,1] <- 1
Phiplus <- solve( t(phi) %*% phi ) %*% t(phi)
w <- Phiplus %*% y
gx <- sign(phi %*% w)
EintRbf2[i] <- sum(gx !=  y) /N
phiOut <- matrix(NA, NT, K+1)
for(j in 2:(K+1)){
phiOut[,j] <- exp( gamma * ((t1 - kms$centers[j-1,1])**2 + (t2 - kms$centers[j-1,2])**2 ))
}
phiOut[,1] <- 1
gxout <- sign(phiOut%*% w)
EoutRbf2[i] <- sum(gxout !=  ty) /NT
}
sum(EintRbf1<EintRbf2)
sum(EoutRbf1<EoutRbf2)
EintRbf1
sum(EintRbf1==0)
sum(EintRbf2==0)
sum(EintRbf1==0)
N <- 10
for(i in 1:N){
for(j in 1:N){
a <- sqrt(i**2 + j**2)
if(a == floor(a)){
cat("i: ", i, "j: ", j, "k: ", a, "\n")
}
}
}
N <- 10
for(i in 1:N){
for(j in 1:i){
a <- sqrt(i**2 + j**2)
if(a == floor(a)){
cat("i: ", i, "j: ", j, "k: ", a, "\n")
}
}
}
N <- 100
for(i in 1:N){
for(j in 1:i){
a <- sqrt(i**2 + j**2)
if(a == floor(a)){
cat("i: ", i, "j: ", j, "k: ", a, "\n")
}
}
}
N <- 100
for(i in 1:N){
for(j in 1:i){
a <- sqrt(i**2 + j**2)
if(a == floor(a)){
cat("i: \t", i, "j: \t", j, "k: \t", a, "\n")
}
}
}
shiny::runApp('work/DP_Forecasting')
import packages("xts")
import.packages("xts")
install.packages("xts")
shiny::runApp('work/DP_Forecasting')
install.packages("forecast")
shiny::runApp('work/DP_Forecasting')
install.packages("sp")
shiny::runApp('work/DP_Forecasting')
shiny::runApp('work/DP_Forecasting')
shiny::runApp('work/DP_Forecasting')
shiny::runApp('work/DP_Forecasting')
shiny::runApp('work/DP_Forecasting')
pi
A <- x**2 * (pi/8 + (pi -2)/4) + 3*x
x = seq(0, 5, 0.001)
x
A <- x**2 * (pi/8 + (pi -2)/4) + 3*x
plot(a)
plot(A)
A <- - x**2 * (pi+4)/8 + 3*x
plot(A)
plot(x,A)
?plot
plot(x,A, type=l)
plot(x,A, type='l')
?plot
data = data.frame(x, A)
data
head(data)
require(ggplot2)
qplot(data)
head(data)
qplot(x, A, adata)
qplot(x, A, adata[A>=0,])
qplot(x, A, data[data$A>=0,])
data
data[data$A>=0,]
datp = data[data$A>=0,]
qplot(x, A, datp)
qplot(x, A, datp)
qplot(x, A, datp)
datp
qplot(x, A, datp)
qplot(x, A, data=datp)
q()
x<- (2, 2, -6, -6)
x<- c(2, 2, -6, -6)
m <- mean(x)
x-m
(x-m)**2
x <- c(-4, -4, 2)
m <- mean(x)
(x-m)**2
library(readr)
install.packages("readr")
install.packages("ggmaps")
install.packages("readr")
install.packages("ggmaps")
version()
version
library(readr)
sd(c(5,8,12))
which.min(c(4,1,6))
Sys.setlocale("LC_ALL", "C")
setwd("C:\\Users\\mmorelli\\Google Drive\\MIT the analytic edge\\Week 01")
# Get the current directory
getwd()
IBM = read.csv("IBMstock.csv")
GE = read.csv("GEstock.csv")
ProcterGamble = read.csv("ProcterGamblestock.csv")
CocaCola = read.csv("CocaColastock.csv")
Boeing = read.csv("Boeingstock.csv")
head(GE)
IBM$Date = as.Date(IBM$Date, "%m/%d/%y")
GE$Date = as.Date(GE$Date, "%m/%d/%y")
CocaCola$Date = as.Date(CocaCola$Date, "%m/%d/%y")
ProcterGamble$Date = as.Date(ProcterGamble$Date, "%m/%d/%y")
Boeing$Date = as.Date(Boeing$Date, "%m/%d/%y")
tail(GE)
summary(IBM)
summary(GE)
summary(CocaCola)
summary(Boeing)
summary(ProcterGamble)
std(ProcterGamble$StockPrice)
sd(ProcterGamble$StockPrice)
plot(Cocacola$Date, CocaCola$StockPrice)
plot(CocaCola$Date, CocaCola$StockPrice)
lines(ProcterGamble$Date, ProcterGamble$StockPrice)
plot(CocaCola$Date, CocaCola$StockPrice, type="l")
lines(ProcterGamble$Date, ProcterGamble$StockPrice)
plot(CocaCola$Date, CocaCola$StockPrice, type="l", col="red")
lines(ProcterGamble$Date, ProcterGamble$StockPrice)
abline(v=as.Date(c("2000-03-01")), lwd=2)
plot(CocaCola$Date, CocaCola$StockPrice, type="l", col="red")
lines(ProcterGamble$Date, ProcterGamble$StockPrice)
abline(v=as.Date(c("1983-03-01")), lwd=2)
plot(CocaCola$Date, CocaCola$StockPrice, type="l", col="red")
lines(ProcterGamble$Date, ProcterGamble$StockPrice)
abline(v=as.Date(c("1983-01-01")), lwd=2)
abline(v=as.Date(c("1984-01-01")), lwd=2)
plot(CocaCola$Date[301:432], CocaCola$StockPrice[301:432], type="l", col="red", ylim=c(0,210))
plot(CocaCola$Date[301:432], CocaCola$StockPrice[301:432], type="l", col="red", ylim=c(0,210))
lines(GE$Date[301:432], GE$StockPrice[301:432],          col="black")
lines(IBM$Date[301:432], IBM$StockPrice[301:432],          col="blue")
lines(ProcterGamble$Date[301:432], ProcterGamble$StockPrice[301:432],          col="purple")
lines(Boeing$Date[301:432], Boeing$StockPrice[301:432],          col="orange")
abline(v=as.Date(c("2000-03-01")), lwd=2)
plot(CocaCola$Date[301:432], CocaCola$StockPrice[301:432], type="l", col="red", ylim=c(0,210))
lines(GE$Date[301:432], GE$StockPrice[301:432],          col="black")
lines(IBM$Date[301:432], IBM$StockPrice[301:432],          col="blue")
lines(ProcterGamble$Date[301:432], ProcterGamble$StockPrice[301:432],          col="purple")
lines(Boeing$Date[301:432], Boeing$StockPrice[301:432],          col="orange")
abline(v=as.Date(c("1997-09-01")), lwd=2)
abline(v=as.Date(c("1997-11-01")), lwd=2)
plot(CocaCola$Date[301:432], CocaCola$StockPrice[301:432], type="l", col="red", ylim=c(0,210))
abline(v=as.Date(c("1997-09-01")), lwd=2)
abline(v=as.Date(c("1997-11-01")), lwd=2)
lines(GE$Date[301:432], GE$StockPrice[301:432],          col="black")
lines(IBM$Date[301:432], IBM$StockPrice[301:432],          col="blue")
lines(ProcterGamble$Date[301:432], ProcterGamble$StockPrice[301:432],          col="purple")
lines(Boeing$Date[301:432], Boeing$StockPrice[301:432],          col="orange")
plot(CocaCola$Date[301:432], CocaCola$StockPrice[301:432], type="l", col="red", ylim=c(0,210))
lines(GE$Date[301:432], GE$StockPrice[301:432],          col="black")
lines(IBM$Date[301:432], IBM$StockPrice[301:432],          col="blue")
lines(ProcterGamble$Date[301:432], ProcterGamble$StockPrice[301:432],          col="purple")
lines(Boeing$Date[301:432], Boeing$StockPrice[301:432],          col="orange")
tapply(IBM$StockPrice, months(IBM$Date), mean, na.rm=TRUE)
tapply(GE$StockPrice, months(GE$Date), mean, na.rm=TRUE)
tapply(CocaCola$StockPrice, months(CocaCola$Date), mean, na.rm=TRUE)
CPS = read.csv("CPSData.csv")
summary(CPS)
sort(table(CPS$Region))
sort(table(CPS$state))
sort(table(CPS$State))
sort(table(CPS$CountryOfBirthCode))
nrow(CPS[CPS$CountryOfBirthCode==57,])
sort(table(CPS$CountryOfBirthCode)) / nrow(CPS)
nrow(CPS[CPS$CountryOfBirthCode==57,]) /nrow(CPS)
sort(table(CPS$Citizenship))
nrow(CPS[CPS$Citizenship!="Non-Citizen",]) /nrow(CPS)
sort(table(CPS$Race))
sort(table(CPS$Race, CPS$Hispanic))
(table(CPS$Race, CPS$Hispanic))
summary(CPS)
table(CPS$State)
summary(CPS)
table(CPS$Region, is.na(CPS$Married))
table(CPS$Sex, is.na(CPS$Married))
table(CPS$Age, is.na(CPS$Married))
table(CPS$Region, is.na(CPS$MetroAreaCode))
table(CPS$State, is.na(CPS$MetroAreaCode))
table(CPS$State, (CPS$MetroAreaCode))
table(CPS$State, is.na(CPS$MetroAreaCode))
table(CPS$Region, is.na(CPS$MetroAreaCode))
tapply(CPS$State, is.na(CPS$MetroAreaCode), mean)
tapply(CPS$State, is.na(CPS$MetroAreaCode), mean)
tapply(CPS$State, is.na(CPS$MetroAreaCode), mean, na.rm=TRUE)
mean(is.na(CPS$MetroAreaCode))
tapply( is.na(CPS$MetroAreaCode), CPS$State, mean, na.rm=TRUE)
MetroAreaMap  = read.csv("MetroAreaCodes.csv")
CountryMap = read.csv("CountryCodes.csv")
CPS = merge(CPS, MetroAreaMap, by.x="MetroAreaCode", by.y="Code", all.x=TRUE)
summary(CPS)
