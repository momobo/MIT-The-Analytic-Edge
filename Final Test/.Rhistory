library(randomForest)
#a <- randomForest(fedFunds ~ ., data=fedFunds)
set.seed(201)
library(caTools)
spl = sample.split(fedFunds$RaisedFedFunds, 0.7)
train = subset(fedFunds, spl==TRUE)
test  = subset(fedFunds, spl==FALSE)
lr <- glm(RaisedFedFunds ~ PreviousRate + Streak + Unemployment + HomeownershipRate + DemocraticPres + MonthsUntilElection,
data=train, family="binomial")
summary(lr)
lr
summary(lr)
str(train)
newd <- as.data.frame(c(-3, 1.17, 5.1, 65.3, as.factor(0), 18),
colnames= c("Streak", "PreviousRate", "HomeownershipRate",  "DemocraticPres", "MonthsUntilElection"))
newd
str(newd)
head(newd)
summary(lr)
newd <- with(newd, data.frame(Streak = -3, PreviousRate = 1.17,Unemployment = 5.1,
HomeownershipRate = 65.3,  DemocraticPres = factor(0), MonthsUntilElection = 18))
newd
str(newd)
predict(lr, type="response", newdata=newd)
mean(fedFunds$RaisedFedFunds)
mean(fedFunds$RaisedFedFunds = 1)
mean(fedFunds$RaisedFedFunds ==1)
predict(lr, type="response", newdata=newd)
summary(lr)
predictTest = predict(lr, type="response", newdata=test)
predictTest
table(test$RaisedFedFunds, predictTest > 0.5)
mean(train$RaisedFedFunds ==1)
predictTest > 0.5
pred <- ifelse(predictTest > 0.5, 1, 0)
pred
table(test$RaisedFedFunds, predictTest > 0.5)
sum(pred=0)
sum(pred==0)
library("ROCR", lib.loc="~/R/R-3.2.3/library")
ROCRpred = prediction(predictTest, test$RaisedFedFunds)
as.numeric(performance(ROCRpred, "auc")@y.values)
perf <- as.numeric(performance(ROCRpred, "auc")@y.values)
plot(perf,col="black",lty=3, lwd=3)
perf <- performance(ROCRpred, "auc")@y.values
plot(perf,col="black",lty=3, lwd=3)
perf <- performance(ROCRpred,"tpr","fpr")
plot(perf,col="black",lty=3, lwd=3)
table(test$RaisedFedFunds, predictTest > 0.5)
TP <- 57
TN <- 60
FP <- 27
FN <- 31
FPR <- FP /(FP+TN)
FPR <- FP /(FP+TN)
TPR <- TP /(TP+FN)
FPR <- FP /(FP+TN)
TPR <- TP /(TP+FN)
c(FPR, TPR)
table(test$RaisedFedFunds, predictTest > 0.3)
table(test$RaisedFedFunds, predictTest > 0.5)
3table(test$RaisedFedFunds, predictTest > 0.5)
3table(test$RaisedFedFunds, predictTest > 0.3)
table(test$RaisedFedFunds, predictTest > 0.3)
TN <- 20
FP <-      67
FN <- 11
TP <-      77
FPR <- FP /(FP+TN)
TPR <- TP /(TP+FN)
c(FPR, TPR)
table(test$RaisedFedFunds, predictTest > 0.37)
TN <- 20
FP <-      67
FN <- 11
TP <-      77
FPR <- FP /(FP+TN)
TPR <- TP /(TP+FN)
c(FPR, TPR)
c(FPR, TPR)
table(test$RaisedFedFunds, predictTest > 0.16)
table(test$RaisedFedFunds, predictTest > 0.52)
TN <- 62
FP <-      25
FN <- 35
TP <-      53
FPR <- FP /(FP+TN)
TPR <- TP /(TP+FN)
c(FPR, TPR)
c(TPR, FPR)
table(test$RaisedFedFunds, predictTest > 0.37)
TN <- 36
FP <-      51
FN <- 14
TP <-      74
FPR <- FP /(FP+TN)
TPR <- TP /(TP+FN)
c(FPR, TPR)
c(TPR, FPR)
table(test$RaisedFedFunds, predictTest > 0.37)
library(caret)
cpGrid = expand.grid( .cp = seq(0.01,0.5,0.01))
cpGrid
set.seed(201)
numFolds = trainControl( method = "cv", number = 10 )
gbmFit1 <- train(RaisedFedFund s~ PreviousRate+ Streak+ Unemployment+ HomeownershipRate+ DemocraticPres+ MonthsUntilElection,
set.seed(201)
numFolds = trainControl( method = "cv", number = 10 )
gbmFit1 <- train(RaisedFedFund ~ PreviousRate+ Streak+ Unemployment+ HomeownershipRate+ DemocraticPres+ MonthsUntilElection,
data = train, data = train, method = "rpart", trControl = numFolds, tuneGrid = cpGrid )
train
str(train)
set.seed(201)
numFolds = trainControl( method = "cv", number = 10 )
gbmFit1 <- train(RaisedFedFund ~ PreviousRate + Streak + Unemployment + HomeownershipRate + DemocraticPres + MonthsUntilElection,
data = train, method = "rpart", trControl = numFolds, tuneGrid = cpGrid )
str(train)
set.seed(201)
numFolds = trainControl( method = "cv", number = 10 )
gbmFit1 <- train(RaisedFedFunds ~ PreviousRate + Streak + Unemployment + HomeownershipRate + DemocraticPres + MonthsUntilElection,
data = train, method = "rpart", trControl = numFolds, tuneGrid = cpGrid )
summary(gbmFit1)
str(gbmFit1)
gbmFit1$resample
gbmFit1
cpGrid = expand.grid( .cp = seq(0.001,0.05,0.001))
set.seed(201)
numFolds = trainControl( method = "cv", number = 10 )
gbmFit1 <- train(RaisedFedFunds ~ PreviousRate + Streak + Unemployment + HomeownershipRate + DemocraticPres + MonthsUntilElection,
data = train, method = "rpart", trControl = numFolds, tuneGrid = cpGrid )
gbmFit1
cpCart = rpart(RaisedFedFunds ~ PreviousRate + Streak + Unemployment + HomeownershipRate + DemocraticPres + MonthsUntilElection,
data = train, method="class", cp=0.016)
prp(cpCart)
library("rpart", lib.loc="~/R/R-3.2.3/library")
library("rpart.plot", lib.loc="~/R/R-3.2.3/library")
prp(cpCart)
PredictCART = predict(cpCart, newdata = newd, type = "class")
PredictCART
table( PredictCART)
PredictCART
PredictCART == 0
PredictCART = predict(cpCart, newdata = test, type = "class")
PredictCART
table(test$RaisedFedFunds, PredictCART)
(64+48)/nrow(test)
households <- read.csv("Households.csv")
str(households)
sum(households$MorningPct==100)
sum(households$MorningPct==0)
sum(households$AfternoonPct==100)
sum(households$MorningPct==0)
str(households)
households[households$AvgSalesValue > 150,]
households[households$AvgDiscount > 25, ]
min(households[households$AvgDiscount > 25, ]$AvgSalesValue)
households[households$AvgSalesValue > 150,]
sum(households$NumVisits >= 300)
sum(households$NumVisits >= 300)/nrow(households)
summary(households)
Households <- read.csv("Households.csv")
str(households)
sum(households$MorningPct==100)
sum(households$AfternoonPct==100)
Households <- read.csv("Households.csv")
library(caret)
preproc = preProcess(Households)
HouseholdsNorm = predict(preproc, Households)
HouseholdsNorm
max(HouseholdsNorm$NumVisits)
max(HouseholdsNorm$AfternoonPct)
min(HouseholdsNorm$AfternoonPct)
set.seed(200)
distances <- dist(HouseholdsNorm, method = "euclidean")
ClusterShoppers <- hclust(distances, method = "ward.D")
plot(ClusterShoppers, labels = FALSE)
set.seed(200)
km = kmeans(HouseHoldsNorm, centers = 10)
set.seed(200)
km = kmeans(HouseholdsNorm, centers = 10)
km
km$cluster
table(km$cluster)
sort(table(km$cluster))
km$cluster
hh <- Households
km$centers
km$centroids
km$centers
?preProcess
HouseholdsNorm
set.seed(5000)
km = kmeans(HouseholdsNorm, centers = 5)
sort(table(km$cluster))
km$centers
energy read.csv("energy.csv")
energy <- read.csv("energy.csv")
str(energy)
unique(energy$YEAR)
plot(energy$YEAR, energy$GenTotalRenewable)
library(ggplot2)
head(energy)
ggplot(data=energy, aes(x=YEAR, y=GenTotalRenewable)) ) + geom_point()
ggplot(data=energy, aes(x=YEAR, y=GenTotalRenewable) ) + geom_point()
ggplot(data=energy, aes(x=YEAR, y=GenTotalRenewable) ) + geom_point(col=STATE)
ggplot(data=energy, aes(x=YEAR, y=GenTotalRenewable) ) + geom_line()
ggplot(data=energy, aes(x=YEAR, y=GenTotalRenewable, col=STATE) ) + geom_point()
ggplot(data=energy, aes(x=YEAR, y=GenTotalRenewable) ) + geom_point(col=STATE)
ggplot(data=energy, aes(x=YEAR, y=GenTotalRenewable) ) + geom_point(data=energy,col=STATE)
ggplot(data=energy, aes(x=YEAR, y=GenTotalRenewable, col=STATE) ) + geom_point(shape=1)
ggplot(data=energy, aes(x=YEAR, y=GenTotalRenewable, col=STATE) ) + geom_point(shape=3)
?geom_point
ggplot(data=energy, aes(x=YEAR, y=GenTotalRenewable, col=STATE) ) + geom_point(shape=1, size=3)
?geom_line
ggplot(data=energy, aes(x=YEAR, y=GenTotalRenewable, col=STATE) ) + geom_line( size=3)
ggplot(data=energy, aes(x=YEAR, y=GenTotalRenewable, col=STATE) ) + geom_line( size=2)
ggplot(data=energy[energy$STATE="CA",], aes(x=YEAR, y=GenTotalRenewable, col=STATE) ) + geom_line( size=2)
ggplot(data=energy[energy$STATE=="CA",], aes(x=YEAR, y=GenTotalRenewable, col=STATE) ) + geom_line( size=2)
ggplot(data=energy[energy$STATE=="AZ",], aes(x=YEAR, y=GenTotalRenewable, col=STATE) ) + geom_line( size=2)
ggplot(data=energy[energy$STATE=="CA",], aes(x=YEAR, y=GenTotalRenewable, col=STATE) ) + geom_line( size=2)
ggplot(data=energy[energy$STATE=="ID",], aes(x=YEAR, y=GenTotalRenewable, col=STATE) ) + geom_line( size=2)
ggplot(data=energy[energy$STATE=="MA",], aes(x=YEAR, y=GenTotalRenewable, col=STATE) ) + geom_line( size=2)
ggplot(data=energy[energy$STATE in ("MA", "CA"),], aes(x=YEAR, y=GenTotalRenewable, col=STATE) ) + geom_line( size=2)
ggplot(data=energy[energy$STATE =="MA" | energy$STATE =="CA"),], aes(x=YEAR, y=GenTotalRenewable, col=STATE) ) + geom_line( size=2)
ggplot(data=energy[energy$STATE =="MA" | energy$STATE =="CA",], aes(x=YEAR, y=GenTotalRenewable, col=STATE) ) + geom_line( size=2)
ggplot(data=energy[energy$STATE =="MA" | energy$STATE =="CA" | energy$STATE =="ID" | energy$STATE =="AZ",], aes(x=YEAR, y=GenTotalRenewable, col=STATE) ) + geom_line( size=2)
summary(energy$presidential.results)
rep <- energy[energy$presidential.results==0, ]
dem <- energy[energy$presidential.results==1, ]
mean(rep$AllSourcesCO2, rm.na=T)
rep$AllSourcesCO2
?mean
mean(rep$AllSourcesCO2, na.rm=T)
mean(rep$AllSourcesCO2, na.rm=T)
mean(dem$AllSourcesCO2, na.rm=T)
mean(rep$AllSourcesNOx, na.rm=T)
mean(dem$AllSourcesNOx, na.rm=T)
?cor
cor(energy$AllSourcesCO2, energy$ESalesIndustrial, use="complete")
cor(as.matrix(energy$AllSourcesCO2, energy$ESalesIndustrial), use="complete")
cor(x=energy$AllSourcesCO2, y=energy$ESalesIndustrial, use="complete")
cor(x=energy$AllSourcesCO2, y=energy$ESalesIndustrial, use="complete.obs")
energy$AllSourcesCO2
energy$ESalesIndustrial
cor(x=energy$AllSourcesCO2, y=energy$EsalesIndustrial , use="complete.obs")
cor(x=energy$AllSourcesCO2, y=energy$EsalesIndustrial , use="complete.obs")
cor(x=energy$AllSourcesSO2, y=energy$EsalesIndustrial , use="complete.obs")
cor(x=energy$AllSourcesNOx, y=energy$EsalesIndustrial , use="complete.obs")
cor(x=energy$AllSourcesCO2, y=energy$EsalesIndustrial , use="complete.obs")
cor(x=energy$AllSourcesSO2, y=energy$EsalesIndustrial , use="complete.obs")
cor(x=energy$AllSourcesNOx, y=energy$EsalesIndustrial , use="complete.obs")
cor(x=energy$AllSourcesCO2, y=energy$EsalesCommercial , use="complete.obs")
cor(x=energy$AllSourcesSO2, y=energy$EsalesIndustrial , use="complete.obs")
cor(x=energy$AllSourcesNOx, y=energy$EsalesResidential , use="complete.obs")
ggplot(data=energy, aes(x=STATE, y=EPriceTotal) ) + geom_boxplot()
?mean
tapply(energy$EPriceTotal, energy$STATE, mean(na.rm=T))
energy$STATE
energy$EPriceTotal
tapply(energy$EPriceTotal, as.factor(energy$STATE), mean(na.rm=T))
tapply(energy$EPriceTotal, as.factor(energy$STATE), mean())
tapply(energy$EPriceTotal, as.factor(energy$STATE), mean
9
tapply(energy$EPriceTotal, energy$STATE, mean)
sort(tapply(energy$EPriceTotal, energy$STATE, mean))
l <- tapply(energy$EPriceTotal, energy$STATE, mean)
str(l)
object(l)
class(l)
sort(l)
l2 <- tapply(energy$GenTotal, energy$STATE, mean)
sort(l2)
ggplot(data=energy, aes(x=STATE, y=EPriceTotal) ) + geom_boxplot()
set.seed(144)
spl = sample(1:nrow(energy), size = 0.7*nrow(energy))
train = energy[spl,]
test = energy[-spl,]
mod = glm(GenSolarBinary ~ GenHydro +
GenSolar + CumlFinancial +
CumlRegulatory + Total.salary +
Import, data=train, model="binomial")
str(energy)
energy$GenSolarBinary <= as.factor(energy$GenSolarBinary)
energy$GenSolarBinary <- as.factor(energy$GenSolarBinary)
mod = glm(GenSolarBinary ~ GenHydro +
GenSolar + CumlFinancial +
CumlRegulatory + Total.salary +
Import, data=train, model="binomial")
set.seed(144)
spl = sample(1:nrow(energy), size = 0.7*nrow(energy))
train = energy[spl,]
test = energy[-spl,]
mod = glm(GenSolarBinary ~ GenHydro +
GenSolar + CumlFinancial +
CumlRegulatory + Total.salary +
Import, data=train, model="binomial")
energy <- read.csv("energy.csv")
str(energy)
set.seed(144)
spl = sample(1:nrow(energy), size = 0.7*nrow(energy))
train = energy[spl,]
test = energy[-spl,]
mod = glm(GenSolarBinary ~ GenHydro +
GenSolar + CumlFinancial +
CumlRegulatory + Total.salary +
Import, data=train, family="binomial")
summary(mod)
predGLM  <- predict(mod, type="response", newdata=test)
predGLM
table(test$GenSolarBinary, predGLM > 0.5)
nrow(test)
accuracy <- (154+18)/nrow(test)
table(test$presidential.results, test$GenSolarBinary, predGLM > 0.5)
isdem <- test$presidential.results == 1
table(test[isdem]$GenSolarBinary, predGLM[isdem] > 0.5)
table(test[isdem,]$GenSolarBinary, predGLM[isdem] > 0.5)
accudem <- (64+16)/nrow(test[isdem])
accudem <- (64+16)/nrow(test[isdem,])
accudem
table(test[isdem,]$GenSolarBinary, predGLM[-isdem] > 0.5)
table(test[-isdem,]$GenSolarBinary, predGLM[-isdem] > 0.5)
accurep <- (153+18)/nrow(test[-isdem,])
nrow(test[-isdem,]
)
nrow(test[isdem,])
nrow(test)
isdem
nrow(test[isdem,])
nrow(test[-isdem,])
nrow(test[!isdem,])
nrow(test)
table(test[!isdem,]$GenSolarBinary, predGLM[!isdem] > 0.5)
accurep <- (153+18)/nrow(test[!isdem,])
table(test[!isdem,]$GenSolarBinary, predGLM[!isdem] > 0.5)
accurep <- (90+2)/nrow(test[!isdem,])
accuracy
accurep
accudem
library("flexclust", lib.loc="~/R/R-3.2.3/library")
?flexclust
limit <- c("CumlRegulatory", "CumlFinancial", "presidential.results", "Total.salary", "Import")
train.limited <- train[,limit]
test.limited  <- test[, limit]
train.norm = preProcess(train.limited)
test.norm  = preProcess(test.limited)
km = kmeans(train.norm, centers = 2, iter.max=1000)
train.norm
head(train.norm)
rm(test.norm)
preproc <- preProcess(train.limited)
train.norm =  predict(preproc, train.limited)
set.seed(144)
km = kmeans(train.norm, centers = 2, iter.max=1000)
sort(table(km$cluster))
km$centers
?as.kcca
randIndex(km)
KMC.kcca = as.kcca(km, train.norm)
randIndex(KMC.kcca)
clusterTrain = predict(km.kcca)
clusterTrain = predict(KMC.kcca)
train.norm$cluster <- clusterTrain
train1 <- filter(train.norm, cluster == 1)
train1 <- filter(train.norm, cluster = 1)
?filter
train1 <- train.norm[train.norm$cluster == 1,]
train2 <- train.norm[train.norm$cluster == 2,]
table(train1$presidential.results)
train$cluster <- clusterTrain
train1 <- train.norm[train.norm$cluster == 1,]
train2 <- train.norm[train.norm$cluster == 2,]
table(train1$presidential.results)
train.limited$cluster <- clusterTrain
train1 <- train.limited[train.limited$cluster == 1,]
train2 <- train.limited[train.limited$cluster == 2,]
table(train1$presidential.results)
table(train2$presidential.results)
table(train1$CumlRegulatory)
table(train2$CumlRegulatory)
table(train1$CumlFinancial)
table(train2$CumlFinancial)
mean(train1$CumlFinancial)
mean(train2$CumlFinancial)
train$cluster <- clusterTrain
train1 <- train[train$cluster == 1,]
train2 <- train[train$cluster == 2,]
mean(train1$AllSourcesCO2)
mean(train2$AllSourcesCO2)
mean(train1$AllSourcesCO2, rm.na=T)
train1$AllSourcesCO2
mean(train1$AllSourcesCO2, na.rm=T)
mean(train2$AllSourcesCO2, na.rm=T)
mean(train1$AllSourcesSO2, na.rm=T)
mean(train2$AllSourcesSO2, na.rm=T)
mean(train1$AllSourcesNOx, na.rm=T)
mean(train2$AllSourcesNOx, na.rm=T)
lgr <- glm(GenSolarBinary ~ GenHydro + GenSolar + CumlFinancial + CumlRegulatory+ Total.salary+ Import,
data=train1, family="binomial")
lgr
summary(lgr)
clusterTest = predict(KMC.kcca, newdata=test)
mod1 <- glm(GenSolarBinary ~ GenHydro + GenSolar + CumlFinancial + CumlRegulatory+ Total.salary+ Import,
data=train1, family="binomial")
summary(lgr)
train.limited$tt= "train"
test.limited$tt = "test"
traintest = rbind(train.limited, test.limited)
train.limited$cluster = NULL
traintest = rbind(train.limited, test.limited)
km = kmeans(traintest, centers = 2, iter.max=1000)
traintest
KMC.kcca = as.kcca(km, traintest)
set.seed(144)
km = kmeans(traintest, centers = 2, iter.max=1000)
traintest
km = kmeans(traintest[, -6], centers = 2, iter.max=1000)
KMC.kcca = as.kcca(km, traintest)
KMC.kcca = as.kcca(km, traintest[, -6])
cluster = predict(KMC.kcca)
set.seed(144)
km = kmeans(traintest[, -6], centers = 2, iter.max=1000)
KMC.kcca = as.kcca(km, traintest[, -6])
cluster = predict(KMC.kcca)
traintest$cluster = cluster
train1 = traintest[cluster=1 | tt="train" ,]
train1 = traintest[cluster==1 & tt =="train" ,]
train1 = traintest[traintest$cluster==1 & traintest$tt =="train" ,]
train1 = traintest[traintest$cluster==1 & traintest$tt =="train" ,]
train1 = traintest[traintest$cluster==2 & traintest$tt =="train" ,]
test1  = traintest[traintest$cluster==1 & traintest$tt =="test" ,]
test2  = traintest[traintest$cluster==2 & traintest$tt =="test" ,]
mod1 <- glm(GenSolarBinary ~ GenHydro + GenSolar + CumlFinancial + CumlRegulatory+ Total.salary+ Import,
data=train1, family="binomial")
train1
train1 = traintest[traintest$cluster==1 & traintest$tt =="train" ,]
train2 = traintest[traintest$cluster==2 & traintest$tt =="train" ,]
test1  = traintest[traintest$cluster==1 & traintest$tt =="test" ,]
test2  = traintest[traintest$cluster==2 & traintest$tt =="test" ,]
train
energy <- read.csv("energy.csv")
set.seed(144)
spl = sample(1:nrow(energy), size = 0.7*nrow(energy))
train = energy[spl,]
test = energy[-spl,]
mod1 <- glm(GenSolarBinary ~ GenHydro + GenSolar + CumlFinancial + CumlRegulatory+ Total.salary+ Import,
data=train1, family="binomial")
set.seed(144)
km = kmeans(train.norm, centers = 2, iter.max=1000)
limit <- c("CumlRegulatory", "CumlFinancial", "presidential.results", "Total.salary", "Import")
train.limited <- train[,limit]
test.limited  <- test[, limit]
library(caret)
preproc <- preProcess(train.limited)
train.norm =  predict(preproc, train.limited)
preproc2 <- PreProcess(test.limited)
preproc2 <- preProcess(test.limited)
test.norm  =  predict(preproc2, test.limited)
set.seed(144)
km = kmeans(train.norm, centers = 2, iter.max=1000)
library(flexclust)
KMC.kcca = as.kcca(km, train.norm)
clusterTrain = predict(KMC.kcca)
clusterTest  = predict(KMC.kcca, newdata=test.norm)
train$cluster <- clusterTrain
train1 <- train[train$cluster == 1,]
train2 <- train[train$cluster == 2,]
test$cluster <- clusterTest
test1 <- test[test$cluster == 1,]
test2 <- test[test$cluster == 2,]
mod1 <- glm(GenSolarBinary ~ GenHydro + GenSolar + CumlFinancial + CumlRegulatory+ Total.salary+ Import,
data=train1, family="binomial")
predictTest = predict(mod1, type="response", newdata=test1)
predictTest
predictTest = predict(mod1, type="class", newdata=test1)
predictTest = predict(mod1, type="response", newdata=test1)
table(test1$GenSolarBinary, predictTest > 0.5)
(114+4)/nrow(test1)
energy$GenSolarBinary <- as.factor(energy$GenSolarBinary)
mod = glm(GenSolarBinary ~ GenHydro +
GenSolar + CumlFinancial +
CumlRegulatory + Total.salary +
Import, data=train, family="binomial")
mod1 <- glm(GenSolarBinary ~ GenHydro + GenSolar + CumlFinancial + CumlRegulatory+ Total.salary+ Import,
data=train1, family="binomial")
predictTest = predict(mod1, type="response", newdata=test1)
table(test1$GenSolarBinary, predictTest > 0.5)
predictTest.orig = predict(mod, type="response", newdata=test1)
table(test1$GenSolarBinary, predictTest.orig > 0.5)
predictTest.orig
table(test1$GenSolarBinary, predictTest.orig > 0.5)
115/nrow(test1)
mod2 <- glm(GenSolarBinary ~ GenHydro + GenSolar + CumlFinancial + CumlRegulatory+ Total.salary+ Import,
data=train2, family="binomial")
summary(mod2)
summary(mod1)
summary(mod2)
summary(mod1)
summary(mod2)
summary(mod1)
predictTest2 = predict(mod2, type="response", newdata=test2)
table(test2$GenSolarBinary, predictTest2 > 0.5)
(40+20)/nrow(test2)
predictTest2.orig = predict(mod, type="response", newdata=test2)
table(test2$GenSolarBinary, predictTest2.orig > 0.5)
(39+18)/nrow(test2)
AllPrediction = c(predictTest, predictTest2)
AllOutcomes = c(test1$GenSolarBinary, test2$GenSolarBinary)
table(AllOutcomes, AllPrediction > 0.5)
AllOutcomes
AllPrediction
table(AllOutcomes, AllPrediction > 0.5)
(154+24)/nrow(test)
